@using System.Drawing

<CascadingValue Value="@(this)" IsFixed="true">
    <CascadingValue Value="@selectedTabName">
        <div style="border-color:@BorderColor;border-style: solid;border-width:@BorderSize.ToString();">
            @{
                var maincss = "c_breadcrumbrtl";
                if (LanguageID == 2)
                {
                    maincss = "c_breadcrumb";
                }
            }
            <ul class="@maincss nav nav-pills nav-tabs nav-fill p-0" role="tablist">
                @if (tabItems is not null)
                {
                    @if (tabItems.Count > 0)
                    {
                        bool IsEnabled = false;
                        int loopIndex = 0;
                        @foreach (var item in tabItems)
                        {
                            IsEnabled = false;
                            @if (loopIndex <= ActiveTabIndex)
                            {
                                IsEnabled = true;
                            }
                            var aCss = "nav-link";
                            var cursorvalue = "pointer";
                            @if (item.Active)
                            {
                                aCss += " active show";
                                IsEnabled = true;
                            }
                            var aStyle = "";
                            @if (!IsEnabled)
                            {
                                aStyle = "pointer-events: none; background-color: lightgray";
                                cursorvalue = "not-allowed";
                            }
                            @if (ActiveTabIndex == loopIndex && item.Active == false)
                            {
                                aStyle = "background-color: mediumseagreen";
                            }
                            if (item.Equals(tabItems.Last()))
                            {
                                <li id="last" class="nav-item" style="cursor: @cursorvalue">
                                    <a class="@aCss" style="@aStyle" tabindex="0" @onclick="async () => await item.OnTabClicked()" role="tab">
                                        <span>@item.Title&nbsp;&nbsp;</span>
                                        @if (loopIndex == ActiveTabIndex)
                                        {
                                            <span class="badge rounded-pill bg-primary" style="font-size: inherit;"><i class="fab fa-font-awesome-flag"></i> @CurrentStageText</span>
                                        }
                                    </a>
                                </li>
                            }
                            else
                            {
                                <li class="nav-item" style="cursor: @cursorvalue">
                                    <a class="@aCss" style="@aStyle" tabindex="0" @onclick="async () => await item.OnTabClicked()" role="tab">
                                        <span>@item.Title&nbsp;&nbsp;</span>
                                        @if (loopIndex == ActiveTabIndex)
                                        {
                                            <span class="badge rounded-pill bg-primary" style="font-size: inherit;"><i class="fab fa-font-awesome-flag"></i> @CurrentStageText</span>
                                        }
                                    </a>
                                </li>
                            }
                            loopIndex++;
                        }
                    }
                }
            </ul>
            <div class="tab-content text-muted" style="height: @StageHeight_STR;overflow:auto">
                @ChildContent
            </div>
        </div>
    </CascadingValue>
</CascadingValue>

@code {
    [Parameter, EditorRequired] public int LanguageID { get; set; } = 1;

    [Parameter]
    public string SelectedTab
    {
        get => selectedTabName;
        set
        {
            if (selectedTabName != value)
            {
                selectedTabName = value;
                OnSelectedTabChanged.InvokeAsync(value);
            }
        }
    }

    [Parameter]
    public EventCallback<string> OnSelectedTabChanged { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public int ActiveTabIndex { get; set; } = 0;

    [Parameter]
    public string CurrentStageText { get; set; }

    [Parameter]
    public string BorderColor
    {
        get
        {
            if (borderColor is null) { return ERMUIKitSettings.Defaults.Stage.BorderColor; }
            return borderColor;
        }
        set { borderColor = value; }
    }
    string borderColor;

    [Parameter]
    public int StageHeight
    {
        get
        {
            if (stageHeight is 0) { return ERMUIKitSettings.Defaults.Stage.Height; }
            return stageHeight;
        }
        set
        {
            stageHeight = value;
            stageHeight_STR = stageHeight.ToString() + "px";
        }
    }
    int stageHeight;
    string stageHeight_STR;
    public string StageHeight_STR
    {
        get

        {
            if (stageHeight > 0)
            {
                stageHeight_STR = stageHeight.ToString() + "px";
            }
            else
            {
                stageHeight_STR = ERMUIKitSettings.Defaults.Stage.Height.ToString() + "px";
            }
            return stageHeight_STR;
        }
    }

    [Parameter]
    public StageBorderSize BorderSize { get; set; } = StageBorderSize.Normal;

    #region StageTabs
    private readonly List<UIKitStageTab> tabItems = new List<UIKitStageTab>();
    private string selectedTabName;


    public IReadOnlyList<UIKitStageTab> TabItems
        => tabItems;

    public async Task ChangeSelectedTab(string title)
    {
        SelectedTab = title;
        await InvokeAsync(StateHasChanged);
    }

    public async Task AddTab(UIKitStageTab tabItem)
    {
        if (tabItems.All(x => x.Title != tabItem.Title))
        {
            tabItems.Add(tabItem);
            await InvokeAsync(StateHasChanged);
        }
    }

    public async Task RemoveTab(UIKitStageTab tabItem)
    {
        if (tabItems.Any(x => x.Title == tabItem.Title))
        {
            tabItems.Remove(tabItem);
            await InvokeAsync(StateHasChanged);
        }
    }
    #endregion

}
